---
import { ViewTransitions } from "astro:transitions";
import Backdrop from "../components/Backdrop.astro";
import {
  faviconUrl,
  thumbnailUrl,
  meta_description,
  meta_keywords,
} from "../assets/site.json";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="theme">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="content-language" content="sv" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <meta name="generator" content={Astro.generator} />
    <meta name="keywords" content={meta_keywords} />
    <meta name="description" content={meta_description} />

    <meta property="og:title" content={title} />
    <meta property="og:description" content={meta_description} />
    <meta property="og:image" content={thumbnailUrl} />

    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={meta_description} />
    <meta name="twitter:image" content={thumbnailUrl} />
    <meta name="twitter:card" content="summary_large_image" />

    <link rel="icon" type="image/png" href={faviconUrl} />

    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body class="font-karlst apply-text-color">
    <slot />
    <Backdrop />
    <style is:global>
      @tailwind utilities;

      @font-face {
        font-family: "KarlST";
        src: url("/fonts/KarlST_Bold.woff2") format("woff2");
        font-weight: bold;
        font-style: normal;
        font-display: swap;
      }

      .apply-text-color {
        @apply theme-red:text-base-red theme-blue:text-base-blue theme-green:text-base-green theme-purple:text-base-purple;
      }

      body {
        @apply selection:bg-slate-800/20;
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        @apply text-base lg:text-lg pt-4 break-words;
      }

      a {
        @apply text-2xl lg:text-3xl hover:blur-xs transition-blur break-words;
      }

      p, span {
        @apply text-2xl lg:text-3xl break-words;
      }
    </style>
    <script is:inline>
      function setTheme() {
        const themeCandidates = [
          "theme--green",
          "theme--red",
          "theme--blue",
          "theme--purple",
        ];

        const theme =
          themeCandidates[Math.floor(Math.random() * themeCandidates.length)];

        localStorage.setItem("theme", theme);
      }

      function applyTheme() {
        const theme = localStorage.getItem("theme") 
        const themeElement = document.querySelector(".theme");

        themeElement.classList.forEach((className) => {
          if (className.startsWith("theme--")) {
            themeElement.classList.remove(className);
          }
        });

        themeElement.classList.add(theme);
      }


      setTheme();
      applyTheme();


      document.addEventListener("astro:page-load", function (event) {
        applyTheme();

        const anchorTags = document.querySelectorAll('a');
        let currentRoute = event.target.location.pathname;

        if (currentRoute !== "/" && currentRoute.endsWith("/")) {
          currentRoute = currentRoute.slice(0,-1)
        }

        anchorTags.forEach((anchorTag) => {
          if (anchorTag.getAttribute('href') === currentRoute) {
            anchorTag.classList.remove("blur-xs");
          }
        });
      });
    </script>
  </body>
</html>
