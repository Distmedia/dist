---
import backdrops from "../assets/backdrops.json";

const debounceTime = 250
const screenBreakpoint = 768

const videoSources = [
  { src: backdrops.desktop_video, type: "video/webm" }, 
  { src: backdrops.desktop_video_fallback, type: "video/mp4" },
  { src: backdrops.mobile_video, type: "video/webm", media: screenBreakpoint }, 
  { src: backdrops.mobile_video_fallback, type: "video/mp4", media: screenBreakpoint }
]
---

<!-- style="filter: hue-rotate(180deg)" -->
<video 
  transition:persist
  class="fixed top-0 left-0 h-screen w-screen object-cover -z-50"
  autoplay loop muted playsinline>
</video>

<script is:inline define:vars={{ videoSources, debounceTime, screenBreakpoint }}>
 let currentSources = [];

  function setVideoSource() {
    const video = document.querySelector('video');
    const newSources = window.innerWidth < screenBreakpoint ? videoSources.filter(source => source.media) : videoSources.filter(source => !source.media);

    if (JSON.stringify(newSources) === JSON.stringify(currentSources)) {
      return;
    }

    currentSources = newSources;

    while (video.firstChild) {
      video.firstChild.remove();
    }

    for (var videoSource of newSources) {
      const source = document.createElement('source');
      source.src = videoSource.src;
      source.type = videoSource.type;
      video.appendChild(source);
    }

    video.load();
  }

  function debounce(func, delay) {
    let debounceTimer;
    return function() {
      const context = this;
      const args = arguments;
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(() => func.apply(context, args), delay);
    }
  }

  const handleResize = debounce(() => {
    setVideoSource()
  }, debounceTime);

  window.addEventListener('load', setVideoSource);
  window.addEventListener('resize', handleResize);
</script>