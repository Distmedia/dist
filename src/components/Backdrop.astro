---
import backdrops from "../assets/backdrops.json";

const debounceTime = 250;
const screenBreakpoint = 768;

const videoSources = [
  { src: backdrops.desktop_video, type: "video/webm", url: undefined },
  { src: backdrops.desktop_video_fallback, type: "video/mp4", url: undefined },
  {
    src: backdrops.mobile_video,
    type: "video/webm",
    media: screenBreakpoint,
    url: undefined,
  },
  {
    src: backdrops.mobile_video_fallback,
    type: "video/mp4",
    media: screenBreakpoint,
    url: undefined,
  },
];
---

<video
  transition:persist
  class="fixed top-0 left-0 h-screen w-screen object-cover -z-50 apply-filters"
  playsinline
  muted
>
</video>

<script is:inline define:vars={{ videoSources, debounceTime, screenBreakpoint }}
>
  let currentSources = [];

  const video = document.querySelector("video");

  video.addEventListener("ended", function () {
    setVideoSource((force = true));
  });

  async function applyObjectsUrls() {
    for (var videoSource of videoSources) {
      if (videoSource.url === undefined) {
        const videoRequest = await fetch(videoSource.src);
        const blob = await videoRequest.blob();
        videoSource.url = window.URL.createObjectURL(blob);
      }
    }
  }

  async function setVideoSource(force = false) {
    await applyObjectsUrls();

    const newSources =
      window.innerWidth < screenBreakpoint
        ? videoSources.filter((source) => source.media)
        : videoSources.filter((source) => !source.media);

    if (!force) {
      if (JSON.stringify(newSources) === JSON.stringify(currentSources)) {
        return;
      }
    }

    currentSources = newSources;

    while (video.firstChild) {
      video.firstChild.remove();
    }

    for (var videoSource of newSources) {
      const source = document.createElement("source");
      source.src = videoSource.url || videoSource.src;
      source.type = videoSource.type;
      video.appendChild(source);
    }

    video.load();
    video.play();
  }

  function debounce(func, delay) {
    let debounceTimer;
    return function () {
      const context = this;
      const args = arguments;
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(() => func.apply(context, args), delay);
    };
  }

  const handleResize = debounce(() => {
    setVideoSource();
  }, debounceTime);

  window.addEventListener("load", setVideoSource);
  window.addEventListener("resize", handleResize);
</script>
