---
import backdrops from "../assets/backdrops.json";

const debounceTime = 250;
const screenBreakpoint = 768;

const videoSources = [
  { src: backdrops.desktop_video_red, type: "video/mp4", url: undefined, theme: "theme--red" },
  { src: backdrops.desktop_video_green, type: "video/mp4", url: undefined, theme: "theme--green" },
  { src: backdrops.desktop_video_blue, type: "video/mp4", url: undefined, theme: "theme--blue" },
  { src: backdrops.desktop_video_purple, type: "video/mp4", url: undefined, theme: "theme--purple" },
  {
    src: backdrops.mobile_video_red,
    type: "video/mp4",
    media: screenBreakpoint,
    url: undefined,
    theme: "theme--red"
  },
  {
    src: backdrops.mobile_video_green,
    type: "video/mp4",
    media: screenBreakpoint,
    url: undefined,
    theme: "theme--green"
  },
  {
    src: backdrops.mobile_video_blue,
    type: "video/mp4",
    media: screenBreakpoint,
    url: undefined,
    theme: "theme--blue"
  },
  {
    src: backdrops.mobile_video_purple,
    type: "video/mp4",
    media: screenBreakpoint,
    url: undefined,
    theme: "theme--purple"
  },
];
---

<video
  transition:persist
  class="fixed w-screen h-screen object-cover object-bottom bottom-0 -z-50"
  playsinline
  muted
>
</video>

<script is:inline define:vars={{ videoSources, debounceTime, screenBreakpoint }}>
  let currentSources = [];

  const video = document.querySelector("video");

  video.addEventListener("ended", function () {
    video.play();
  });

  async function applyObjectsUrls() {
    const theme = localStorage.getItem("theme")

    for (var videoSource of videoSources) {
      if (videoSource.url === undefined && videoSource.theme === theme) {
        const videoRequest = await fetch(videoSource.src);
        const blob = await videoRequest.blob();
        videoSource.url = window.URL.createObjectURL(blob);
      }
    }
  }

  async function setVideoSource() {
    await applyObjectsUrls();

    const theme = localStorage.getItem("theme")

    const newSources =
      window.innerWidth < screenBreakpoint
        ? videoSources.filter((source) => source.media && source.theme === theme)
        : videoSources.filter((source) => !source.media && source.theme === theme);
    
    currentSources = newSources;

    while (video.firstChild) {
      video.firstChild.remove();
    }

    for (var videoSource of newSources) {
      const source = document.createElement("source");
      source.src = videoSource.url || videoSource.src;
      // source.src = videoSource.src;
      source.type = videoSource.type;
      video.appendChild(source);
    }

    video.load();
    video.play();
  }

  function debounce(func, delay) {
    let debounceTimer;
    return function () {
      const context = this;
      const args = arguments;
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(() => func.apply(context, args), delay);
    };
  }

  const handleResize = debounce(() => {
    setVideoSource();
  }, debounceTime);

  window.addEventListener("load", setVideoSource);
  window.addEventListener("resize", handleResize);
</script>
