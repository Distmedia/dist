---
interface Props {
	active?: string;
	additional?: string;
	back?: string;
}

const { active, additional, back } = Astro.props;

function applyAttributes(routes) {
  return routes.map(r => {
    const display = r.id.charAt(0).toUpperCase() + r.id.slice(1)
    const style = r.id === active ? "" : "blur-xs [@media(any-hover:hover){&:hover}]:blur-none transition-blur"

    return { ...r, display, style }
  })
}

const routes = applyAttributes([
  { id: "index", href: "/" },
  { id: "read", href: "/read" },
  { id: "listen", href: "/listen" },
])
---

<div class="navbar md:hidden flex fixed w-full p-4 justify-between space-x-2 z-10">
  {!additional && routes.map(r => (<span><a href={r.href} class={r.style}>{r.display}</a></span>))}
  {additional && <span class="cursor-default">{additional}</span>}
  {additional && <a href={back} class="hover:blur-xs transition-blur !text-4xl -translate-y-2">x</a>}
</div>

<div class="navbar hidden md:grid fixed w-full p-4 grid-cols-[140px_140px_140px_1fr_min-content] z-10">
  {routes.map(r => (<span><a href={r.href} class={r.style}>{r.display}</a></span>))}
  {additional && <span class="cursor-default">{additional}</span>}
  {additional && <a href={back} class="hover:blur-xs transition-blur !text-4xl -translate-y-2">x</a>}
</div>
